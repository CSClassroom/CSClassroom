using System;
using System.Collections.Generic;
using System.Reflection;
using CSC.CSClassroom.Model.Assignments;
using CSC.CSClassroom.Service.Assignments.QuestionGeneration;
using Moq;
using Xunit;

namespace CSC.CSClassroom.Service.UnitTests.Assignments.QuestionGeneration
{
	/// <summary>
	/// Unit tests for the QuestionModelFactory class.
	/// </summary>
	public class QuestionModelFactory_UnitTests
	{
		/// <summary>
		/// Ensures that GetQuestionModel returns the question model
		/// created by a JavaModelBuilder for the type Question.
		/// </summary>
		[Fact]
		public void GetQuestionModel_ReturnsResult()
		{
			var expectedResult = new List<JavaClass>();
			var builder = GetMockJavaModelBuilder(expectedResult);
			var questionModelFactory = GetQuestionModelFactory(builder.Object);

			var result = questionModelFactory.GetQuestionModel();

			Assert.Equal(expectedResult, result);
		}

		/// <summary>
		/// Ensures that the resulting question model excludes the
		/// generated question template type, since we do not want to
		/// allow meta-generated questions (generated questions that 
		/// generate other generated questions).
		/// </summary>
		[Fact]
		public void GetQuestionModel_ExcludesGeneratedQuestionTemplateType()
		{
			var expectedResult = new List<JavaClass>();
			var builder = GetMockJavaModelBuilder(expectedResult);
			var questionModelFactory = GetQuestionModelFactory(builder.Object);

			questionModelFactory.GetQuestionModel();

			builder.Verify
			(
				b => b.ExcludeType(typeof(GeneratedQuestionTemplate)),
				Times.Once
			);
		}

		/// <summary>
		/// Ensures that the resulting question model excludes the
		/// question name property, since the name must always be constant.
		/// </summary>
		[Fact]
		public void GetQuestionModel_ExcludesNameProperty()
		{
			var expectedResult = new List<JavaClass>();
			var builder = GetMockJavaModelBuilder(expectedResult);
			var questionModelFactory = GetQuestionModelFactory(builder.Object);

			questionModelFactory.GetQuestionModel();

			builder.Verify
			(
				b => b.ExcludeProperties
				(
					It.Is<Func<PropertyInfo, bool>>
					(
						expr => expr(typeof(Question).GetProperty("Name")) == true
					)
				),
				Times.Once
			);
		}

		/// <summary>
		/// Ensures that the resulting question model excludes all
		/// ID properties, since IDs are dynamically generated by
		/// the data layer.
		/// </summary>
		[Fact]
		public void GetQuestionModel_ExcludesIdProperties()
		{
			var expectedResult = new List<JavaClass>();
			var builder = GetMockJavaModelBuilder(expectedResult);
			var questionModelFactory = GetQuestionModelFactory(builder.Object);

			questionModelFactory.GetQuestionModel();

			builder.Verify
			(
				b => b.ExcludeProperties
				(
					It.Is<Func<PropertyInfo, bool>>
					(
						expr =>
							   expr(typeof(Question).GetProperty("Id")) == true
							&& expr(typeof(MethodQuestionTest).GetProperty("MethodQuestionId")) == true
					)
				),
				Times.Once
			);
		}

		/// <summary>
		/// Ensures that the resulting question model excludes all
		/// back reference properties, since they are dynamically 
		/// populated by the data layer.
		/// </summary>
		[Fact]
		public void GetQuestionModel_ExcludesBackReferenceProperties()
		{
			var expectedResult = new List<JavaClass>();
			var builder = GetMockJavaModelBuilder(expectedResult);
			var questionModelFactory = GetQuestionModelFactory(builder.Object);

			questionModelFactory.GetQuestionModel();

			builder.Verify
			(
				b => b.ExcludeProperties
				(
					It.Is<Func<PropertyInfo, bool>>
					(
						expr =>
							   expr(typeof(MethodQuestionTest).GetProperty("MethodQuestion")) == true
							&& expr(typeof(RequiredMethod).GetProperty("ClassQuestion")) == true
					)
				),
				Times.Once
			);
		}

		/// <summary>
		/// Returns a new mock java code generation factory.
		/// </summary>
		private Mock<IJavaCodeGenerationFactory> GetMockJavaCodeGenFactory(
			Type type,
			IJavaModelBuilder javaModelBuilder)
		{
			var javaCodeGenFactory = new Mock<IJavaCodeGenerationFactory>();

			javaCodeGenFactory
				.Setup(factory => factory.CreateBuilder(type))
				.Returns(javaModelBuilder);

			return javaCodeGenFactory;
		}
		
		/// <summary>
		/// Returns a mock java model builder.
		/// </summary>
		private Mock<IJavaModelBuilder> GetMockJavaModelBuilder(
			IList<JavaClass> javaModel)
		{
			var javaModelBuilder = new Mock<IJavaModelBuilder>();

			javaModelBuilder
				.Setup(b => b.ExcludeType(It.IsAny<Type>()))
				.Returns(javaModelBuilder.Object);

			javaModelBuilder
				.Setup(b => b.ExcludeProperties(It.IsAny<Func<PropertyInfo, bool>>()))
				.Returns(javaModelBuilder.Object);

			javaModelBuilder
				.Setup(b => b.Build())
				.Returns(javaModel);

			return javaModelBuilder;
		}

		/// <summary>
		/// Returns a new question model factory.
		/// </summary>
		private IQuestionModelFactory GetQuestionModelFactory(
			IJavaModelBuilder javaModelBuilder)
		{
			var javaCodeGenFactory = GetMockJavaCodeGenFactory
			(
				typeof(Question),
				javaModelBuilder
			);

			return new QuestionModelFactory
			(
				javaCodeGenFactory.Object
			);
		}
	}
}
