// <auto-generated />
using CSC.CSClassroom.Model.Assignments;
using CSC.CSClassroom.Model.Projects;
using CSC.CSClassroom.Model.Users;
using CSC.CSClassroom.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using System;

namespace CSC.CSClassroom.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AnswerInOrder");

                    b.Property<int>("ClassroomId");

                    b.Property<bool>("CombinedSubmissions");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsPrivate");

                    b.Property<int?>("MaxAttempts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("OnlyShowCombinedScore");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId", "Name")
                        .IsUnique();

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.AssignmentDueDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignmentId");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("SectionId");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("AssignmentId", "SectionId")
                        .IsUnique();

                    b.ToTable("AssignmentDueDates");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.AssignmentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignmentId");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<double>("Points");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("AssignmentId", "Name")
                        .IsUnique();

                    b.ToTable("AssignmentQuestions");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ClassroomGradebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId", "Name")
                        .IsUnique();

                    b.ToTable("ClassroomGradebooks");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.CodeConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CodeQuestionId");

                    b.Property<string>("ErrorMessage")
                        .IsRequired();

                    b.Property<int>("Frequency");

                    b.Property<int>("Order");

                    b.Property<string>("Regex")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CodeQuestionId");

                    b.ToTable("CodeConstraints");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.CodeQuestionTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ExpectedOutput");

                    b.Property<string>("ExpectedReturnValue");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.ToTable("CodeQuestionTests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CodeQuestionTest");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ImportedClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName")
                        .IsRequired();

                    b.Property<int>("CodeQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("CodeQuestionId");

                    b.ToTable("ImportedClasses");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.MultipleChoiceQuestionChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Correct");

                    b.Property<string>("Explanation");

                    b.Property<int>("MultipleChoiceQuestionId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceQuestionChoices");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.PrerequisiteQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FirstQuestionId");

                    b.Property<int>("Order");

                    b.Property<int>("SecondQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("FirstQuestionId");

                    b.HasIndex("SecondQuestionId");

                    b.ToTable("PrerequisiteQuestions");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowPartialCredit");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("QuestionCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId", "Name")
                        .IsUnique();

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RandomlySelectedQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("RandomlySelectedQuestionId")
                        .IsUnique();

                    b.HasIndex("ClassroomId", "Name", "RandomlySelectedQuestionId")
                        .IsUnique();

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.RequiredMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassQuestionId");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsStatic");

                    b.Property<string>("Name");

                    b.Property<string>("ParamTypes");

                    b.Property<string>("ReturnType");

                    b.HasKey("Id");

                    b.HasIndex("ClassQuestionId");

                    b.ToTable("RequiredMethods");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.SectionGradebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomGradebookId");

                    b.Property<DateTime>("LastTransferDate");

                    b.Property<int>("SectionId");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("ClassroomGradebookId", "SectionId")
                        .IsUnique();

                    b.ToTable("SectionGradebooks");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ShortAnswerQuestionBlank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<bool>("Regex");

                    b.Property<int>("ShortAnswerQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("ShortAnswerQuestionId");

                    b.ToTable("ShortAnswerQuestionBlanks");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.UserQuestionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignmentQuestionId");

                    b.Property<string>("CachedQuestionData");

                    b.Property<DateTime?>("CachedQuestionDataTime");

                    b.Property<string>("LastQuestionSubmission");

                    b.Property<int>("NumAttempts");

                    b.Property<int?>("Seed");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("AssignmentQuestionId", "UserId")
                        .IsUnique();

                    b.ToTable("UserQuestionData");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.UserQuestionSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CachedQuestionData");

                    b.Property<DateTime>("DateSubmitted");

                    b.Property<double>("Score");

                    b.Property<int?>("Seed");

                    b.Property<string>("SubmissionContents");

                    b.Property<int>("UserQuestionDataId");

                    b.HasKey("Id");

                    b.HasIndex("UserQuestionDataId");

                    b.ToTable("UserQuestionSubmission");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Classrooms.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("DailyLatenessDeduction");

                    b.Property<TimeSpan>("DefaultTimeDue");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("GitHubOrganization")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<double>("MaxLatenessDeduction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Classrooms.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowNewRegistrations");

                    b.Property<bool>("AllowStudentMessages");

                    b.Property<int>("ClassroomId");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId", "Name")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomId");

                    b.Property<string>("Contents")
                        .IsRequired();

                    b.Property<DateTime>("DatePosted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("DatePosted")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.AnnouncementSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnnouncementId");

                    b.Property<int>("SectionId");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("AnnouncementId", "SectionId")
                        .IsUnique();

                    b.ToTable("AnnouncementSections");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<string>("FileName");

                    b.Property<int>("MessageId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.AttachmentData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentId");

                    b.Property<byte[]>("FileContents");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.ToTable("AttachmentData");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Actionable");

                    b.Property<int>("ClassroomId");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("OwnerId")
                        .IsConcurrencyToken();

                    b.Property<int>("StudentId");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StudentId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<string>("Contents");

                    b.Property<int>("ConversationId");

                    b.Property<DateTime?>("Sent");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConversationId", "AuthorId")
                        .IsUnique()
                        .HasFilter("Sent IS NULL");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Build", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommitId");

                    b.Property<DateTime>("DateCompleted");

                    b.Property<DateTime>("DateStarted");

                    b.Property<string>("Output");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CommitId")
                        .IsUnique();

                    b.ToTable("Build");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Checkpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.CheckpointDates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckpointId");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("SectionId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("CheckpointId", "SectionId")
                        .IsUnique();

                    b.ToTable("CheckpointDates");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.CheckpointTestClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckpointId");

                    b.Property<bool>("Required");

                    b.Property<int>("TestClassId");

                    b.HasKey("Id");

                    b.HasIndex("TestClassId");

                    b.HasIndex("CheckpointId", "TestClassId")
                        .IsUnique();

                    b.ToTable("CheckpointTestClasses");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Commit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuildJobId");

                    b.Property<string>("BuildRequestToken");

                    b.Property<DateTime>("CommitDate");

                    b.Property<string>("Message");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("PushDate");

                    b.Property<string>("Sha");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectId", "UserId", "Sha")
                        .IsUnique();

                    b.ToTable("Commits");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.ImmutableFilePath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImmutableFilePaths");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.PrivateFilePath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PrivateFilePaths");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("BuildCommits");

                    b.Property<int>("ClassroomId");

                    b.Property<bool>("ExplicitSubmissionRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId", "Name")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckpointId");

                    b.Property<int>("CommitId");

                    b.Property<DateTime?>("DateFeedbackRead");

                    b.Property<DateTime?>("DateFeedbackSaved");

                    b.Property<DateTime>("DateSubmitted");

                    b.Property<string>("Feedback");

                    b.Property<bool>("FeedbackSent");

                    b.Property<int>("PullRequestNumber");

                    b.HasKey("Id");

                    b.HasIndex("CommitId");

                    b.HasIndex("CheckpointId", "CommitId", "DateSubmitted")
                        .IsUnique();

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.TestClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName");

                    b.Property<string>("DisplayName");

                    b.Property<int>("Order");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TestClasses");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BuildId");

                    b.Property<string>("ClassName");

                    b.Property<string>("FailureMessage");

                    b.Property<string>("FailureOutput");

                    b.Property<string>("FailureTrace");

                    b.Property<bool>("PreviouslySucceeded");

                    b.Property<bool>("Succeeded");

                    b.Property<string>("TestName");

                    b.HasKey("Id");

                    b.HasIndex("BuildId", "ClassName", "TestName")
                        .IsUnique();

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.AdditionalContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "EmailAddress")
                        .IsUnique();

                    b.ToTable("AdditionalContacts");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.ClassroomMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomId");

                    b.Property<string>("GitHubTeam");

                    b.Property<bool>("InGitHubOrganization");

                    b.Property<int>("Role");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("UserId", "ClassroomId")
                        .IsUnique();

                    b.ToTable("ClassroomMemberships");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.SectionMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomMembershipId");

                    b.Property<int>("Role");

                    b.Property<int>("SectionId");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("ClassroomMembershipId", "SectionId")
                        .IsUnique();

                    b.ToTable("SectionMemberships");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.SectionRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomMembershipId");

                    b.Property<bool>("EmailAnnouncements");

                    b.Property<bool>("EmailMessages");

                    b.Property<int>("SectionId");

                    b.Property<bool>("ViewAnnouncements");

                    b.Property<bool>("ViewMessages");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("ClassroomMembershipId", "SectionId")
                        .IsUnique();

                    b.ToTable("SectionRecipients");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("EmailAddressConfirmed");

                    b.Property<string>("EmailConfirmationCode");

                    b.Property<string>("FirstName");

                    b.Property<string>("GitHubLogin");

                    b.Property<string>("LastName");

                    b.Property<string>("PublicName");

                    b.Property<bool>("SuperUser");

                    b.Property<string>("UniqueId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ClassQuestionTest", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.CodeQuestionTest");

                    b.Property<int>("ClassQuestionId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("MethodBody");

                    b.Property<string>("ReturnType")
                        .IsRequired();

                    b.HasIndex("ClassQuestionId");

                    b.ToTable("ClassQuestionTest");

                    b.HasDiscriminator().HasValue("ClassQuestionTest");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.MethodQuestionTest", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.CodeQuestionTest");

                    b.Property<int>("MethodQuestionId");

                    b.Property<string>("ParameterValues");

                    b.HasIndex("MethodQuestionId");

                    b.ToTable("MethodQuestionTest");

                    b.HasDiscriminator().HasValue("MethodQuestionTest");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ProgramQuestionTest", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.CodeQuestionTest");

                    b.Property<string>("CommandLineArguments");

                    b.Property<int>("ProgramQuestionId");

                    b.Property<string>("TestDescription")
                        .IsRequired();

                    b.HasIndex("ProgramQuestionId");

                    b.ToTable("ProgramQuestionTest");

                    b.HasDiscriminator().HasValue("ProgramQuestionTest");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.CodeQuestion", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.Question");

                    b.Property<string>("InitialSubmission");

                    b.ToTable("CodeQuestion");

                    b.HasDiscriminator().HasValue("CodeQuestion");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.Question");

                    b.Property<bool>("AllowMultipleCorrectAnswers");

                    b.ToTable("MultipleChoiceQuestion");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.RandomlySelectedQuestion", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.Question");


                    b.ToTable("RandomlySelectedQuestion");

                    b.HasDiscriminator().HasValue("RandomlySelectedQuestion");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ShortAnswerQuestion", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.Question");

                    b.Property<string>("Explanation");

                    b.ToTable("ShortAnswerQuestion");

                    b.HasDiscriminator().HasValue("ShortAnswerQuestion");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ClassQuestion", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.CodeQuestion");

                    b.Property<bool>("AllowPublicFields");

                    b.Property<string>("ClassName")
                        .IsRequired();

                    b.Property<int>("ClassSubmissionType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("FileTemplate")
                        .IsRequired();

                    b.ToTable("ClassQuestion");

                    b.HasDiscriminator().HasValue("ClassQuestion");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.GeneratedQuestionTemplate", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.CodeQuestion");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("FullGeneratorFileContents");

                    b.Property<int>("FullGeneratorFileLineOffset");

                    b.Property<string>("GeneratorContents");

                    b.Property<int?>("NumSeeds");

                    b.ToTable("GeneratedQuestionTemplate");

                    b.HasDiscriminator().HasValue("GeneratedQuestionTemplate");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.MethodQuestion", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.CodeQuestion");

                    b.Property<string>("MethodName")
                        .IsRequired();

                    b.Property<string>("ParameterTypes")
                        .IsRequired();

                    b.Property<string>("ReturnType")
                        .IsRequired();

                    b.ToTable("MethodQuestion");

                    b.HasDiscriminator().HasValue("MethodQuestion");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ProgramQuestion", b =>
                {
                    b.HasBaseType("CSC.CSClassroom.Model.Assignments.CodeQuestion");

                    b.Property<string>("ProgramClassName")
                        .IsRequired();

                    b.ToTable("ProgramQuestion");

                    b.HasDiscriminator().HasValue("ProgramQuestion");
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.Assignment", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Classroom", "Classroom")
                        .WithMany("Assignments")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.AssignmentDueDate", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.Assignment", "Assignment")
                        .WithMany("DueDates")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.AssignmentQuestion", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.Assignment", "Assignment")
                        .WithMany("Questions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Assignments.Question", "Question")
                        .WithMany("AssignmentQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ClassroomGradebook", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Classroom", "Classroom")
                        .WithMany("ClassroomGradebooks")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.CodeConstraint", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.CodeQuestion", "CodeQuestion")
                        .WithMany("CodeConstraints")
                        .HasForeignKey("CodeQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ImportedClass", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.CodeQuestion", "CodeQuestion")
                        .WithMany("ImportedClasses")
                        .HasForeignKey("CodeQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.MultipleChoiceQuestionChoice", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.MultipleChoiceQuestion", "MultipleChoiceQuestion")
                        .WithMany("Choices")
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.PrerequisiteQuestion", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.Question", "FirstQuestion")
                        .WithMany()
                        .HasForeignKey("FirstQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Assignments.Question", "SecondQuestion")
                        .WithMany()
                        .HasForeignKey("SecondQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.Question", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.QuestionCategory", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.QuestionCategory", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Classroom", "Classroom")
                        .WithMany("Categories")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Assignments.RandomlySelectedQuestion", "RandomlySelectedQuestion")
                        .WithOne("ChoicesCategory")
                        .HasForeignKey("CSC.CSClassroom.Model.Assignments.QuestionCategory", "RandomlySelectedQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.RequiredMethod", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.ClassQuestion", "ClassQuestion")
                        .WithMany("RequiredMethods")
                        .HasForeignKey("ClassQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.SectionGradebook", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.ClassroomGradebook", "ClassroomGradebook")
                        .WithMany("SectionGradebooks")
                        .HasForeignKey("ClassroomGradebookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Section", "Section")
                        .WithMany("SectionGradebooks")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ShortAnswerQuestionBlank", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.ShortAnswerQuestion", "ShortAnswerQuestion")
                        .WithMany("Blanks")
                        .HasForeignKey("ShortAnswerQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.UserQuestionData", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.AssignmentQuestion", "AssignmentQuestion")
                        .WithMany()
                        .HasForeignKey("AssignmentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.UserQuestionSubmission", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.UserQuestionData", "UserQuestionData")
                        .WithMany("Submissions")
                        .HasForeignKey("UserQuestionDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Classrooms.Section", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Classroom", "Classroom")
                        .WithMany("Sections")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.Announcement", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.AnnouncementSection", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Communications.Announcement", "Announcement")
                        .WithMany("Sections")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.Attachment", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Communications.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.AttachmentData", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Communications.Attachment", "Attachment")
                        .WithOne("AttachmentData")
                        .HasForeignKey("CSC.CSClassroom.Model.Communications.AttachmentData", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.Conversation", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("CSC.CSClassroom.Model.Users.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Communications.Message", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Communications.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Build", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Commit", "Commit")
                        .WithOne("Build")
                        .HasForeignKey("CSC.CSClassroom.Model.Projects.Build", "CommitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Checkpoint", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Project", "Project")
                        .WithMany("Checkpoints")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.CheckpointDates", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Checkpoint", "Checkpoint")
                        .WithMany("SectionDates")
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.CheckpointTestClass", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Checkpoint", "Checkpoint")
                        .WithMany("TestClasses")
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Projects.TestClass", "TestClass")
                        .WithMany("CheckpointTestClasses")
                        .HasForeignKey("TestClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Commit", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Users.User", "User")
                        .WithMany("Commits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.ImmutableFilePath", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Project", "Project")
                        .WithMany("ImmutableFilePaths")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.PrivateFilePath", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Project", "Project")
                        .WithMany("PrivateFilePaths")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Project", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Classroom", "Classroom")
                        .WithMany("Projects")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.Submission", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Checkpoint", "Checkpoint")
                        .WithMany("Submissions")
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Projects.Commit", "Commit")
                        .WithMany("Submissions")
                        .HasForeignKey("CommitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.TestClass", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Project", "Project")
                        .WithMany("TestClasses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Projects.TestResult", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Projects.Build", "Build")
                        .WithMany("TestResults")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.AdditionalContact", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Users.User", "User")
                        .WithMany("AdditionalContacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.ClassroomMembership", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Users.User", "User")
                        .WithMany("ClassroomMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.SectionMembership", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Users.ClassroomMembership", "ClassroomMembership")
                        .WithMany("SectionMemberships")
                        .HasForeignKey("ClassroomMembershipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Section", "Section")
                        .WithMany("SectionMemberships")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Users.SectionRecipient", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Users.ClassroomMembership", "ClassroomMembership")
                        .WithMany("SectionRecipients")
                        .HasForeignKey("ClassroomMembershipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.CSClassroom.Model.Classrooms.Section", "Section")
                        .WithMany("SectionRecipients")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ClassQuestionTest", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.ClassQuestion", "ClassQuestion")
                        .WithMany("Tests")
                        .HasForeignKey("ClassQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.MethodQuestionTest", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.MethodQuestion", "MethodQuestion")
                        .WithMany("Tests")
                        .HasForeignKey("MethodQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.CSClassroom.Model.Assignments.ProgramQuestionTest", b =>
                {
                    b.HasOne("CSC.CSClassroom.Model.Assignments.ProgramQuestion", "ProgramQuestion")
                        .WithMany("Tests")
                        .HasForeignKey("ProgramQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
