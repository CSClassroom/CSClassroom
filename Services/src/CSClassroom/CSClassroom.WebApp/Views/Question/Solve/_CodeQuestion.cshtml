@using CSC.CSClassroom.Model.Questions.ServiceResults
@using CSC.CSClassroom.WebApp.ViewModels.Shared
@model CSC.CSClassroom.Model.Questions.ServiceResults.QuestionToSolve
@{
    var question = Model.Question as CodeQuestion;
    var lastSubmission = Model.LastSubmission as CodeQuestionSubmission;
}
@if (ViewBag.SubmissionTypeDescription != null)
{
    @Html.Raw(ViewBag.SubmissionTypeDescription)
}
@Html.Raw(question.SubmissionTypeDescription)
<br />
<br />
<h4>Type your solution below.</h4>
<input type="hidden" name="QuestionSubmissionType" value="CodeQuestionSubmission" />
@Html.Partial(
    $"_CodeEditor",
    new CodeEditorSettings
    (
        "Contents",
        lastSubmission?.Contents ?? question.InitialSubmission,
        !string.IsNullOrEmpty(question.InitialSubmission) ? question.InitialSubmission : null,
        textArea: true, 
        minLines: 10, 
        maxLines: 150
    )
)

<script type="text/javascript">
    function removeTable(id)
    {
        $("#wrapper-" + id).remove();
    }

    function renderNoWrap(data, type, row)
    {
        if (data === null)
            return "";
        else
            return '<pre>' + escapeHtml(data) + '</pre>';
    }

    function render(data, type, row)
    {
        if (data === null)
            return "";
        else
            return escapeHtml(data);
    }

    function replaceTable(tableTitle, id)
    {
        removeTable(id);

        var wrapper = $('<div></div>')
            .attr('id', 'wrapper-' + id);

        var title = $('<h3>' + tableTitle + '</h3>');

        var table = $('<table></table>')
           .attr('id', id)
           .attr('cellspacing', 0)
           .addClass("table")
           .addClass("table-bordered")
           .css('width', '100%')
           .css('border-radius', '5px');

        wrapper.append('<br>').append(title).append(table);

        $("#questionForm").append(wrapper);

        return table;
    }

    var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
    };

    function escapeHtml(string) {
        return String(string).replace(/[&<>"'\/]/g, function (s) {
            return entityMap[s];
        });
    }
    
    function getErrorCols()
    {
        return [
            {
                data: "fullErrorText",
                render: function (data, type, row) {
                    return '<pre style="font-weight: bold; color: red">' + escapeHtml(data) + '</span>'
                }
            }
        ];
    }

    function getTestResultCols(testResults)
    {
        var includeOutputCols = false;
        var includeReturnValCols = false;
        var includeExceptionCols = false;

        for (var index = 0; index < testResults.length; index++)
        {
            var result = testResults[index];

            if (result.expectedOutput || result.actualOutput)
            {
                includeOutputCols = true;
            }

            if (result.expectedReturnValue || result.actualReturnValue)
            {
                includeReturnValCols = true;
            }

            if (result.exceptionText)
            {
                includeExceptionCols = true;
            }
        }

        var cols = [];

        cols.push({ data: "succeeded", title: "Result", render: function (data, type, row) 
        { 
            var color = data ? 'green' : 'red';
            var str = data ? 'Passed' : 'Failed';
            return '<span style="font-weight: bold; color: ' + color + '">' + str + '</span>'
        }});

        cols.push({ data: "description", title: "Test Description" });

        if (includeOutputCols)
        {
            cols.push({ data: "expectedOutput", title: "Expected Output", render: renderNoWrap });
            cols.push({ data: "actualOutput", title: "Actual Output", render: renderNoWrap });
        }

        if (includeReturnValCols)
        {
            cols.push({ data: "expectedReturnValue", title: "Expected Return Value", render: render });
            cols.push({ data: "actualReturnValue", title: "Actual Return Value", render: render });
        }

        if (includeExceptionCols)
        {
            cols.push({ data: "exceptionText", title: "Exception", render: renderNoWrap });
        }

        cols.push({ data: "visualizeUrl", title: "Visualize", render: function (data, type, row)
        {
            return '<a href="' + data + '" target="_blank">Visualize</a>';
        }});
            
        return cols;
    }

    function updateErrorsInCodeEditor(errors)
    {
        if (errors && errors.length > 0)
        {
            ace.edit("Contents").getSession().setAnnotations(errors.filter(function (error) {
                return (error.lineNumber !== null && error.lineNumber !== undefined);
            }).map(function (currentValue, index, array) {
                return {
                    row: currentValue.lineNumber - 1,
                    column: 0,
                    text: currentValue.fullErrorText,
                    type: 'error'
                };
            }));
        }
        else
        {
            ace.edit("Contents").getSession().setAnnotations([]);
        }
    }

    function updateErrorsTable(errors)
    {
        var errorsTable = replaceTable("Errors", "errors");

        if (errors && errors.length > 0) {
            errorsTable.dataTable({
                destroy: true,
                info: false,
                ordering: false,
                paging: false,
                searching: false,
                columns: getErrorCols(),
                data: errors,
                fnHeaderCallback: function (nHead) {
                    $(nHead).css('display', 'none');
                }
            });
        }
        else {
            removeTable("errors");
        }
    }

    function updateTestResultsTable(testResults)
    {
        var testResultsTable = replaceTable("Test Results", "testResults");

        if (testResults && testResults.length > 0) {
            testResultsTable.dataTable({
                destroy: true,
                info: false,
                ordering: false,
                paging: false,
                searching: false,
                columns: getTestResultCols(testResults),
                data: testResults
            });
        }
        else {
            removeTable("testResults");
        }

    }

    function displayResult(response)
    {
        updateErrorsInCodeEditor(response.result.errors);
        updateErrorsTable(response.result.errors);
        updateTestResultsTable(response.result.testResults);
    }
</script>
