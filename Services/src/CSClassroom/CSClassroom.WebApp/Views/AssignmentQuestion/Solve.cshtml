@using System.Runtime.InteropServices.ComTypes
@using System.Threading.Tasks
@using CSC.CSClassroom.Model.Assignments.ServiceResults
@using CSC.CSClassroom.WebApp.Extensions
@using CSC.CSClassroom.WebApp.Providers
@using CSC.CSClassroom.WebApp.ViewModels.Shared
@using CSC.CSClassroom.Model.Users
@inject ITimeZoneProvider TimeZoneProvider
@model QuestionToSolve

@{
    ViewData["Title"] = "Solve";
}

@if (Model.User.Id != User.Id)
{
    <h2 style="color: blue">Question view for @Model.User.FirstName @Model.User.LastName</h2>
}

<h2>@Assignment.Name</h2>
<h4>@Model.Name</h4>
@if (!Model.Interactive && Assignment.MaxAttempts.HasValue && Assignment.MaxAttempts.Value > 0 && Model.Status.AllowNewAttempt)
{
    <h5 style="color: blue">Attempt @(Model.Status.NumAttempts + 1) / @Assignment.MaxAttempts</h5>
}

@if (ClassroomRole >= ClassroomRole.Admin)
{
    @Html.Partial("_EditQuestion", Model)
}
<p> </p>

@if (!Model.Status.AllowNewAttempt)
{
    if (Model.Status.AnsweredCorrectly)
    {
        <span>You have previously answered this question correctly.</span>
    }
    else
    {
        <span>You have made the maximum number of submissions for this question.</span>
    }
}
else if (Assignment.AnswerInOrder && Model.AssignmentProgress.GetUnsolvedPriorQuestions().Any())
{
    <span>You must solve the following questions before working on this question:</span>
    <ul>
        @foreach (var unsolvedPrereq in Model.AssignmentProgress.GetUnsolvedPriorQuestions())
        {
            <li>
                @Html.ActionLink(
                    unsolvedPrereq.AssignmentQuestionName,
                    "Solve",
                    new { id = unsolvedPrereq.AssignmentQuestionId })
            </li>
        }
    </ul>
}
else
{
    @Html.Partial("_MarkdownViewer", new MarkdownViewerSettings("questionDescription", @Model.Question.Description))
    <br/>
    if (Model.Interactive)
    {
        <form action="@(Url.Action("SolveQuestion"))" method="post" id="questionForm">
            <input type="hidden" name="@($"AssignmentQuestionId")" value="@Model.AssignmentQuestionId"/>
            @Html.Partial($"Solve/_{Model.Question.GetType().Name}", Model)
            
            @if (Model.User.Id == User.Id)
            {
                <p> </p>
                <div class="form-group">
                    @if (Model.Status.NumAttemptsRemaining.HasValue)
                    {
                        <span>Attempts Remaining: </span><span id="attemptsRemaining">@Model.Status.NumAttemptsRemaining.Value</span><br />
                    }
                    <input id="submit" type="submit" value="Submit" class="btn btn-default"/>
                    &nbsp;&nbsp;<input id="revert" type="button" value="Revert to default" class="btn btn-default" style="display: none"/>
                    <div id="progress" style="display: none">
                        <br/>
                        <img src="~/images/ajax-loader.gif">
                        <span>&nbsp; Waiting for results...</span>
                    </div>
                </div>
            }
        </form>
        <script type="text/javascript">
            var limitedAttempts = @(Model.Status.NumAttemptsRemaining.HasValue ? "true" : "false");
            var attemptsRemaining = @(Model.Status.NumAttemptsRemaining.HasValue ? Model.Status.NumAttemptsRemaining.ToString() : "null");

            $("#questionForm").ajaxForm({
                beforeSend: function(e) {
                    $("#submit").prop("disabled", true);
                    $("#progress").show();
                },
                success: function(obj) {
                    if (limitedAttempts) {
                        attemptsRemaining--;
                        $("#attemptsRemaining")[0].innerText = attemptsRemaining;
                    }
                    displayResult(obj);
                    if (!limitedAttempts || attemptsRemaining > 0) {
                        $("#submit").prop("disabled", false);
                    }
                    var curQuestion = $("#currentQuestion");
                    var isIndeterminate = curQuestion.prop("indeterminate");
                    var isChecked = curQuestion.prop("checked");
                    if (obj.score > 0.0 && obj.score < 1.0 && !isIndeterminate && !isChecked) {
                        curQuestion.prop("indeterminate", true);
                    } else if (obj.score >= 1.0) {
                        curQuestion.prop("indeterminate", false);
                        curQuestion.prop("checked", true);
                    }
                    $("#progress").hide();
                },
                error: function(obj) {
                    alert("An error occured.");
                    $("#submit").prop("disabled", false);
                    $("#progress").hide();
                }
            });
        </script>
    }
    else
    {
        <form action="@(Url.Action("SolveQuestion"))" method="post" id="questionForm">
            <input type="hidden" name="@($"AssignmentQuestionId")" value="@Model.AssignmentQuestionId" />
            @Html.Partial($"Solve/_{Model.Question.GetType().Name}", Model)
            
            @if (Model.User.Id == User.Id)
            {
                <p> </p>
                <div class="form-group">
                    <input id="submit" type="submit" value="Submit" class="btn btn-default" />
                </div>
            }
        </form>
    }
}
<br />
@if (Model.PastSubmissions.Any())
{
    @Html.Partial("_PastSubmissions", new PastSubmissions(Model.User.Id, Model.PastSubmissions))
}

<hr/>
@Html.Partial("_AssignmentProgress", Model.AssignmentProgress)

<script>
    keepAuthenticatedSessionAlive();
</script>

@section Scripts {
    <environment names="Development">
        <script src="~/js/markdownBundle.js" asp-append-version="true"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="~/js/markdownBundle.min.js" asp-append-version="true"></script>
    </environment>
}
