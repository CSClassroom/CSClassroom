@using System.Runtime.InteropServices.ComTypes
@using System.Threading.Tasks
@using CSC.Common.Infrastructure.Serialization
@using CSC.CSClassroom.WebApp.Extensions
@using CSC.CSClassroom.WebApp.Providers
@using CSC.CSClassroom.WebApp.ViewModels.Shared
@using CSC.CSClassroom.Model.Users
@inject IJsonSerializer Json;
@inject ITimeZoneProvider TimeZoneProvider;
@model IList<CSC.CSClassroom.Model.Questions.ServiceResults.SubmissionResult>

<style>
    thead {
        border: lightgray 1px solid;
    }

    tbody {
        border: lightgray 1px solid;
    }

    td {
        border: lightgray 1px solid;
    }
</style>

@{
    ViewData["Title"] = "View Submission";
}

@if (Model[0].QuestionSubmitted.User.Id != User.Id)
{
    <h2 style="color: blue">Submission from @Model[0].QuestionSubmitted.User.FirstName @Model[0].QuestionSubmitted.User.LastName</h2>
    <br />
}

<h2>@Assignment.Name</h2>
<h5 style="color: blue">Submitted on @Model[0].SubmissionDate.FormatLongDateTime(TimeZoneProvider)</h5>
<hr/>
@if (!Assignment.OnlyShowCombinedScore || ClassroomRole >= ClassroomRole.Admin)
{
    <form>
        @for (int index = 0; index < Model.Count; index++)
        {
            var submissionResult = Model[index];
            <h3>@submissionResult.QuestionSubmitted.Name</h3>
            if (ClassroomRole >= ClassroomRole.Admin)
            {
                @Html.Partial("_EditQuestion", submissionResult.QuestionSubmitted)
                <br />
                <br />
            }
            @Html.Partial("_MarkdownViewer", new MarkdownViewerSettings($"questionDescription-{index}", @submissionResult.QuestionSubmitted.Question.Description))
            <br/>
            @Html.Partial($"ViewSubmission/_{submissionResult.QuestionSubmitted.Question.GetType().Name}", submissionResult)
            @Html.Partial("_QuestionScore", submissionResult)
            <hr/>
        }
    </form>
}

<h3>Total Score: @Math.Round(Model.Sum(result => result.ScoreWithLateness), 1, MidpointRounding.AwayFromZero) / @Model.Sum(result => result.QuestionPoints)</h3>
@if (Model[0].QuestionSubmitted.User.Id == User.Id)
{
    if (Model.Any(result => result.QuestionSubmitted.AnyAttemptsRemaining && result.ScoreWithoutLateness < result.QuestionPoints))
    {
        <h3>@Html.ActionLink("Try Again", "SolveAll")</h3>
    }

    <br />
    var pastSubmissions = Model
        .SelectMany(result => result.QuestionSubmitted.PastSubmissions)
        .Distinct()
        .OrderBy(d => d)
        .ToList();

    if (pastSubmissions.Any())
    {
        @Html.Partial("_PastSubmissions", pastSubmissions)
    }
}


@section Scripts {
    <environment names="Development">
        <script src="~/js/markdownBundle.js" asp-append-version="true"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="~/js/markdownBundle.min.js" asp-append-version="true"></script>
    </environment>
}

